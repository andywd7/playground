/*==========*\
   #FORMS
 -----------
 * Elements
 * Classes 
\*==========*/


/*
 * Normalize non-controls
------------------------------------------------------
 * Restyle and baseline non-control form elements.
 */
fieldset {
  border: 0;

  /*
   * Chrome and Firefox set a `min-width: -webkit-min-content;` on fieldsets,
   * so we reset that to ensure it behaves more like a standard block element.
   * See https://github.com/twbs/bootstrap/issues/12359.
   */
  min-width: 0;

  + fieldset {
    margin-top: $line-height-computed;
  }
}


legend {
  border: 0; /* Correct `color` not being inherited in IE 8/9. */
  border-bottom: 1px solid $legend-border-color;
  color: $legend-color;
  display: block;
  margin-bottom: ($line-height-computed / 2);
  padding: 0 0 ($line-height-computed / 3);
  width: 100%;
  //font-size: ($font-size-base * 1.5);
  //font-weight: 700;
  //line-height: inherit;
  //text-transform: uppercase;
}


label,
.label {
  display: inline-block;
  //font-weight: bold;
  margin-bottom: rem(2px);
  max-width: 100%; /* Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141) */
}


/*
 * Normalize form controls
--------------------------------------------------------------------------------
 * While most of our form styles require extra classes, some basic normalization
 * is required to ensure optimum display with or without those classes to better
 * address browser inconsistencies.
 */

/*
 * reset search focus outline
 */
input[type="search"]:focus {
  outline-offset: -2px;
}


/*
 * Position radios and checkboxes better
 */
input[type="radio"],
input[type="checkbox"] {
  line-height: normal;
  margin: rem(5px 0 0);
  //margin-top: 1px \9; /* IE8-9 */

  /*
   * Focus for file, radio, and checkbox
   */
  &:focus {
    @include tab-focus;
  }

  /*
   * Disabled Radios & Checkboxes
  ---------------------------------------------------------------------------------------
   * Apply same disabled cursor tweak as for inputs
   * Some special care is needed because <label>s don't inherit their parent's `cursor`.
   * NOTE: Neither radios nor checkboxes can be readonly.
   */
  &[disabled],
  &.is-disabled,
  fieldset[disabled] & {
    cursor: not-allowed;
  }
}


// /*
//  * Set the height of file controls to match text inputs
//  */
// input[type="file"] {
//   display: block;
// }


// /*
//  * Make range inputs behave like textual form controls
//  */
// input[type="range"] {
//   display: block;
//   width: 100%;
// }


/*
 * Make multiple select elements height not fixed
 */
select[multiple],
select[size] {
  height: auto;
}


// /*
//  * Adjust output element
//  */
// output {
//   display: block;
//   padding-top: ($padding-base-vertical + 1);
//   font-size: $font-size-base;
//   line-height: $line-height-base;
//   color: $input-color;
// }



/*
 * Common form controls
----------------------------------------------------------------------------
 * Shared size and type resets for form controls. Apply `.f-control` to any
 * of the following form controls:
 -----------------------------------
 * select
 * textarea
 * input[type="text"]
 * input[type="password"]
 * input[type="datetime"]
 * input[type="datetime-local"]
 * input[type="date"]
 * input[type="month"]
 * input[type="time"]
 * input[type="week"]
 * input[type="number"]
 * input[type="email"]
 * input[type="url"]
 * input[type="search"]
 * input[type="tel"]
 * input[type="color"]
 -----------------------------------
 */
 // scss-lint:disable PropertyCount
.f-control {
  /*
   * Customize the `:focus` state
   */
  @include form-control-focus();

  /*
   * Placeholder
   */
  @include placeholder($input-color-placeholder);

  @include border-radius($input-border-radius);
  background-color: $input-bg;
  background-image: none; /* Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214 */
  border: 1px solid $input-border;
  //box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
  color: $input-color;
  display: block;
  font-size: $font-size-base;
  height: $input-height-base; /* Make inputs at least the height of their button counterpart (base line-height + padding + border) */
  line-height: $line-height-base;
  padding: $padding-base-vertical ($padding-base-horizontal / 2);
  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
  width: 100%;

  /*
   * Disabled and read-only inputs
  ------------------------------------------------------------------------------
   * HTML5 says that controls under a fieldset > legend:first-child won't be
   * disabled if the fieldset is disabled. Due to implementation difficulty, we
   * don't honor that edge case; we style them as disabled anyway.
   */
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: $input-bg-disabled;
    cursor: not-allowed;
    opacity: 1; /* iOS fix for unreadable disabled content */
  }
}
// scss-lint:enable PropertyCount

/*
 * Reset height for `textarea`s
 */
// scss-lint:disable QualifyingElement
textarea.f-control {
  height: auto;
}

/*
 * Adjust padding for select so inner text/placeholders align vertically
 */
select.f-control {
  max-width: 100%;
  padding-left: ($padding-base-horizontal / 2) - rem(2px);
  width: auto;
}
// scss-lint:enable QualifyingElement



// /*
//  * Special styles for iOS temporal inputs
// --------------------------------------------------------------------------------
//  * In Mobile Safari, setting `display: block` on temporal inputs causes the
//  * text within the input to become vertically misaligned.
//  * As a workaround, we set a pixel line-height that matches the
//  * given height of the input. Since this screws up everything else, we have to
//  * appropriately reset it for Internet Explorer and the size variations.
//  */
//input[type="date"],
//input[type="time"],
//input[type="datetime-local"],
//input[type="month"] {
//  line-height: $input-height-base;
//  // IE8+ misaligns the text within date inputs, so we reset
//  line-height: $line-height-base #{\0};

//  &.input-sm {
//    line-height: $input-height-sm;
//  }

//  &.input-lg {
//    line-height: $input-height-lg;
//  }
//}



/*
 * Checkboxes and radios
------------------------------------------------------------------------
 * Indent the labels to position radios/checkboxes as hanging controls.
 */
.radio,
.ckbx,
.radio-inline,
.ckbx-inline {
  cursor: pointer;
  font-weight: normal;
  margin-bottom: 0;
  padding-left: rem(20px);

  &.is-disabled,
  fieldset[disabled] & {
    color: $txt-muted;
    cursor: not-allowed;
  }
}

.radio input[type="radio"],
.ckbx input[type="checkbox"],
.radio-inline input[type="radio"],
.ckbx-inline input[type="checkbox"] {
  margin-left: rem(-20px);
  margin-top: rem(4px) \9;
  position: absolute;
}


.radio,
.ckbx {
  display: block;
  min-height: ($line-height-computed * 1.25); /* clear the floating input if there is no label text */
  position: relative;
}

.radio + .radio,
.ckbx + .ckbx {
  margin-top: rem(-5px); /* Move up sibling radios or checkboxes for tighter spacing */
}


/*
 * Radios and checkboxes on right of text
 */
.radio--right,
.ckbx--right {
  padding-left: 0;
}

.radio--right input[type="radio"],
.ckbx--right input[type="checkbox"] {
  margin-left: rem(10px);
}


/*
 * Radios and checkboxes on same line
 */
.radio-inline,
.ckbx-inline {
  display: inline-block;
  vertical-align: middle;
}

.radio-inline + .radio-inline,
.ckbx-inline + .ckbx-inline {
  margin-left: rem(10px); /* space out consecutive inline controls */
  //margin-top: 0;
}



/*
 * Static form control text
--------------------------------------------------------------------------------
 * Apply class to a `p` element to make any string of text align with labels in
 * a horizontal form layout.
 */
.f-control_static {
  /* Remove default margin from `p` */
  margin-bottom: 0;
  /* Size it appropriately next to real form controls */
  padding-bottom: ($padding-base-vertical + rem(1px));
  padding-top: ($padding-base-vertical + rem(1px));

//  &.input-lg,
//  &.input-sm {
//    padding-left: 0;
//    padding-right: 0;
//  }
}


// /*
//  * Form control sizing
// ---------------------------------------------------------------------------
//  * Build on `.f-control` with modifier classes to decrease or increase the
//  * height and font-size of form controls.
//  */
// @include input-size('.input-sm', $input-height-sm, $padding-sm-vertical, $padding-sm-horizontal, $font-size-sm, $line-height-sm, $border-radius-sm);
// @include input-size('.input-lg', $input-height-lg, $padding-lg-vertical, $padding-lg-horizontal, $font-size-lg, $line-height-lg, $border-radius-lg);


/*
 * Help text
--------------------------------------------------------------------------------
 * Apply to any element you wish to create light text for placement immediately
 * below a form control. Use for general help, formatting, or instructional text.
 */
.help-block {
  color: $txt-muted; /* lighten the text some for contrast */
  display: block; /* account for any element using help-block */
  font-size: rem(12px);
  margin-bottom: rem(10px);
  margin-top: rem(2px);

  .f-group & {
    margin-bottom: 0;
  }
}
